global string $houdiniEngine_loadedOTLFilePaths[];

source houdiniEngineOTLsManager;

global proc
houdiniEngine_debugWindowMenuClick()
{
    hapiDebugWindow();
}

global proc
houdiniEngine_browseOTL()
{
    string $filter = "Houdini Digital Assets (*.otl);;All Files (*.*)";
    string $results[] = `fileDialog2
        -caption "Browse OTL File"
        -okCaption "Open"
        -fileFilter $filter
        -fileMode 1`;
    if (size($results) == 0)
    {
        return;
    }

    string $otlFilePath = $results[0];

    houdiniEngine_loadOTL($otlFilePath);
}

global proc
houdiniEngine_loadOTL(string $otlFilePath)
{
    global string $houdiniEngine_loadedOTLFilePaths[];

    if(size(`houdiniAsset -listAssets $otlFilePath`) == 0)
    {
        return;
    }

    houdiniEngine_addRecentOTLFile $otlFilePath;

    // Maya 2012 doesn't have stringArrayFind
    int $index = -1;
    for($i = 0; $i < size($houdiniEngine_loadedOTLFilePaths); $i++)
    {
        if($otlFilePath == $houdiniEngine_loadedOTLFilePaths[$i])
        {
            $index = $i;
            break;
        }
    }

    // does it already exist?
    if($index == -1)
    {
        $houdiniEngine_loadedOTLFilePaths[size($houdiniEngine_loadedOTLFilePaths)] =
            $otlFilePath;
        $houdiniEngine_loadedOTLFilePaths = `sort $houdiniEngine_loadedOTLFilePaths`;
    }

    houdiniEngineOTLsManager_refreshAssetList;

    houdiniEngine_instantiateAsset($otlFilePath);
}

global proc
houdiniEngine_assetPicker(string $otlFilePath, string $message)
{
    string $formLayout = `setParent -q`;

    formLayout -e -width 300 $formLayout;

    string $text = `text -label $message`;

    string $textScrollList = `textScrollList`;

    string $okButton = `button
        -label "OK"
        -command ("layoutDialog -dismiss `textScrollList -q -selectItem " + $textScrollList + "`")`;
    string $cancelButton = `button
        -label "Cancel"
        -command "layoutDialog -dismiss \"\""`;

    formLayout -edit
        -attachForm $text "top" 5
        -attachForm $text "left" 5
        -attachForm $text "right" 5
        -attachNone $text "bottom"

        -attachControl $textScrollList "top" 5 $text
        -attachForm $textScrollList "left" 5
        -attachForm $textScrollList "right" 5
        -attachNone $textScrollList "bottom"

        -attachControl $okButton "top" 5 $textScrollList
        -attachForm $okButton "left" 5
        -attachPosition $okButton "right" 5 33
        -attachNone $okButton "bottom"

        -attachControl $cancelButton "top" 5 $textScrollList
        -attachPosition $cancelButton "left" 5 66
        -attachForm $cancelButton "right" 5
        -attachNone $cancelButton "bottom"

        $formLayout;

    textScrollList -e
        -doubleClickCommand ("layoutDialog -dismiss `textScrollList -q -selectItem " + $textScrollList + "`")
        $textScrollList;

    string $assets[] = `houdiniAsset -listAssets $otlFilePath`;
    for($asset in $assets)
    {
        textScrollList -e
            -append $asset
            $textScrollList;
    }
}

global proc
houdiniEngine_instantiateAsset(string $otlFilePath)
{
    string $assets[] = `houdiniAsset -listAssets $otlFilePath`;
    if(size($assets) == 0)
    {
        return;
    }

    string $asset;
    if(size($assets) == 1)
    {
        // just load the first asset
        $asset = $assets[0];
    }
    else if(size($assets) > 1)
    {
        // popup a dialog for the user to choose
        $asset = `layoutDialog
            -title ""
            -uiScript ("houdiniEngine_assetPicker"
                + " \"" + $otlFilePath + "\""
                + " \"The OTL file contains multiple assets. Please choose one to create.\"")`;
    }

    if(size($asset))
    {
        houdiniAsset -loadAsset $otlFilePath $asset;
    }
}

global proc
houdiniEngine_addRecentOTLFile(string $otlFilePath)
{
    int $index = -1;
    if(`optionVar -exists houdiniEngine_recentOTLFilePaths`)
    {
        // Maya 2012 doesn't have stringArrayFind
        string $recentOTLFilePaths[] = `optionVar -q houdiniEngine_recentOTLFilePaths`;
        for($i = 0; $i < size($recentOTLFilePaths); $i++)
        {
            if($otlFilePath == $recentOTLFilePaths[$i])
            {
                $index = $i;
                break;
            }
        }
    }

    // does it already exist?
    if($index != -1)
    {
        optionVar -removeFromArray houdiniEngine_recentOTLFilePaths $index;
        optionVar -stringValueAppend houdiniEngine_recentOTLFilePaths $otlFilePath;
    }
    else
    {
        optionVar -stringValueAppend houdiniEngine_recentOTLFilePaths $otlFilePath;
    }

    int $numToRemove = `optionVar -arraySize houdiniEngine_recentOTLFilePaths` - 20;
    for($i = 0; $i < $numToRemove; $i++)
    {
        optionVar -removeFromArray houdiniEngine_recentOTLFilePaths 0;
    }
}

global proc
houdiniEngine_buildRecentOTLsMenu(string $menuItem)
{
    string $recentOTLFilePaths[];
    if(`optionVar -exists houdiniEngine_recentOTLFilePaths`)
    {
        $recentOTLFilePaths = `optionVar -q houdiniEngine_recentOTLFilePaths`;
    }

    // same as existing menuItems?
    string $existingMenus[] = `menu -query -itemArray $menuItem`;
    int $numExistingMenus = size($existingMenus);
    if ($numExistingMenus == size($recentOTLFilePaths))
    {
        for ($i = 0; $i < $numExistingMenus; $i++)
        {
            string $label = `menuItem -query -label $existingMenus[$i]`;
            if ($label != $recentOTLFilePaths[$numExistingMenus-$i-1])
            {
                break;
            }
        }

        if ($i == $numExistingMenus)
        {
            return;
        }
    }

    // clear existing
    menu -edit -deleteAllItems $menuItem;

    setParent -menu $menuItem;

    for($i = size($recentOTLFilePaths); $i-- > 0;)
    {
        menuItem
            -label $recentOTLFilePaths[$i]
            -command ("houdiniEngine_loadOTL"
                    + " \"" + encodeString($recentOTLFilePaths[$i]) + "\"");
    }
}

global proc
houdiniEngine_syncAssetOutput(int $syncOnlyVisible)
{
    string $currSels[] = `ls -sl`;
    if( size($currSels) < 1 )
    {
	error("Please select a houdiniAsset node to sync the output.");
    }
    string $currSel = $currSels[0];
    string $nodeTypeOfSel = `nodeType $currSel`;
    if( $nodeTypeOfSel == "houdiniAsset" )
    {
	string $children[] = `listRelatives -c -pa $currSel`;
	for( $ii = 0; $ii < size($children); $ii++ )
	{
	    delete $children[$ii];
	}
	string $cmd = "houdiniAsset";
	if( $syncOnlyVisible )
	    $cmd = $cmd + " -syncOnlyVisible";
			
	$cmd = $cmd + " -sync ";
	$cmd = $cmd + $currSel;
	evalEcho($cmd);
    }
    else
    {
	error("Please select a houdiniAsset node to sync the output.");
    }
}

global proc
houdiniEngine_reloadAsset(string $asset)
{
    string $assetPathPlug = $asset + ".assetPath";
    string $assetPath = `getAttr $assetPathPlug`;

    string $srcPlugs[] = `listConnections -s 1 -d 0 -p 1 $asset`;
    string $dstPlugs[] = `listConnections -s 0 -d 1 -p 1 $asset`;

    string $inputPlugs[];
    for( $ii=0; $ii < size($srcPlugs); $ii++ )
    {
	string $srcPlug = $srcPlugs[$ii];
	string $inputPlug[] = `listConnections -s 0 -d 1 -p 1 $srcPlug`;
	$inputPlugs[ size($inputPlugs) ] = $inputPlug[0];
	
    }

    string $outputPlugs[];
    for( $ii=0; $ii < size($dstPlugs); $ii++ )
    {
	string $dstPlug = $dstPlugs[$ii];
	string $outputPlug[] = `listConnections -s 1 -d 0 -p 1 $dstPlug`;
	$outputPlugs[ size($outputPlugs) ] = $outputPlug[0];		
    }


    //disconnect all inputs and outputs first.

    for( $ii=0; $ii < size($srcPlugs); $ii++ )
    {
	string $srcPlug = $srcPlugs[$ii];
	string $inputPlug = $inputPlugs[$ii];
	disconnectAttr $srcPlug $inputPlug;	
    }

    for( $ii=0; $ii < size($dstPlugs); $ii++ )
    {
	string $dstPlug = $dstPlugs[$ii];
	string $outputPlug = $outputPlugs[$ii];
	disconnectAttr $outputPlug $dstPlug;	
    }    

    //delete our asset, flush the undo since this operation is not undoable.
    //and it also force the deleted node to fall off the undo queue so it gets
    // actually destructed and thus remove the corresponding asset on the houdini side
    delete $asset;		
    flushUndo;

    //reload the asset and restore connections:

    houdiniAsset -loadAsset $assetPath;
    

    refreshEditorTemplates;
    
    for( $ii=0; $ii < size($srcPlugs); $ii++ )
    {
	string $srcPlug = $srcPlugs[$ii];
	string $inputPlug = $inputPlugs[$ii];

	string $array[] = stringToStringArray($srcPlug, ".");
	string $srcNode = $array[0];
	if(`objExists $srcNode`)
	{
	    connectAttr $srcPlug $inputPlug;	
	}
    }

    for( $ii=0; $ii < size($dstPlugs); $ii++ )
    {
	string $dstPlug = $dstPlugs[$ii];
	string $outputPlug = $outputPlugs[$ii];

	string $array[] = stringToStringArray($dstPlug, ".");
	string $dstNode = $array[0];
	if(`objExists $dstNode`)
	{
	    connectAttr $outputPlug $dstPlug;	
	}
    }
    
    select -r $asset;  
    
}

global proc
houdiniEngine_reloadAssetOutputMenuClick()
{
    string $currSels[] = `ls -sl`;
    if( size($currSels) < 1 )
    {
	error("Please select a houdiniAsset node to reload.");
    }
    string $currSel = $currSels[0];
    string $nodeTypeOfSel = `nodeType $currSel`;
    if( $nodeTypeOfSel == "houdiniAsset" )
    {
		
	//FIXME: TODO: This is not yet working reliably. use
	//a workaround for now to reload the asset.
	//houdiniAsset -reloadAsset $currSel;
	//refreshEditorTemplates;

	houdiniEngine_reloadAsset( $currSel );
    }
    else
    {
	error("Please select a houdiniAsset node to reload.");
    }

}

global proc
houdiniEngine_createInstance( string $assetNode, 
			      string $objToInstancePath,
			      string $parent, 
			      int $instancerIndex, 
			      int $instanceIndex )
{
    
    string $array[] = stringToStringArray($objToInstancePath, "|");
    string $objToInstanceName = $array[ size($array) - 1 ];
    string $newInstanceName = $objToInstanceName + "_instance" + $instanceIndex;
    string $newInstance[] = `instance -name $newInstanceName $objToInstancePath`;

    if( $parent != "" )
    {
	parent $newInstance[0] $parent;
    }
    
    showHidden $newInstance[0];

    string $outputTransformPlug = $assetNode + ".outputInstancers[" + $instancerIndex + "]" + ".outputInstanceTransform[" + $instanceIndex + "]";    
    string $outputTranslatePlug = $outputTransformPlug + ".outputInstanceTranslate";
    string $newInstanceTranslatePlug = $newInstance[0] + ".t";
    connectAttr $outputTranslatePlug $newInstanceTranslatePlug;

    string $outputRotatePlug = $outputTransformPlug + ".outputInstanceRotate";
    string $newInstanceRotatePlug = $newInstance[0] + ".r";
    connectAttr $outputRotatePlug $newInstanceRotatePlug;

    string $outputScalePlug = $outputTransformPlug + ".outputInstanceScale";
    string $newInstanceScalePlug = $newInstance[0] + ".s";
    connectAttr $outputScalePlug $newInstanceScalePlug;
    

}

global proc
houdiniEngine_launchOrboltPageClick()
{
    launch -web "http://www.orbolt.com/maya";
}

global proc
houdiniEngine_launchForum()
{
    launch -web "http://www.sidefx.com/index.php?option=com_forum&Itemid=172&page=viewforum&f=46";
}

global proc
houdiniEngineCreateUI()
{
    //cleanup UI
    houdiniEngineDeleteUI;

    global string $gMainWindow;
    setParent $gMainWindow;

    menu -label "Houdini Engine"
	-tearOff true
	houdiniEngineMenu;

    menuItem
        -label "Browse OTL File..."
        -command "houdiniEngine_browseOTL";

    $recentOTLsMenu = `menuItem
        -label "Recent OTL Files"
        -subMenu true`;
    setParent -menu ..;

    menuItem -label "OTLs Manager..."
	-command "houdiniEngineOTLsManager";

    menuItem -divider true;

    menuItem -label "Sync Asset Output"
	-command "performAssetSync 0";
    menuItem -optionBox true
	-command "performAssetSync 1";    
    menuItem -label "Save Current Houdini Scene..." 
        -command "saveHipFile";

    menuItem -divider true;
    
    menuItem -label "Get Assets..."
        -command "houdiniEngine_launchOrboltPageClick";
    menuItem -label "Visit Forum..."
        -command "houdiniEngine_launchForum";

    menuItem -e -postMenuCommand ("houdiniEngine_buildRecentOTLsMenu"
            + " \"" + $recentOTLsMenu + "\"")
        $recentOTLsMenu;

}
