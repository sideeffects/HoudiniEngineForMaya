global proc
houdiniEngine_debugWindowMenuClick()
{
    hapiDebugWindow();
}

global proc
houdiniEngine_loadOTLMenuClick()
{
    string $filter = "Houdini Digital Assets (*.otl);;All Files (*.*)";
    string $results[] = `fileDialog2 -cap "Load Houdini Asset" -okc "Open" -fileFilter $filter -fm 1`;
    if (size($results) > 0)
	houdiniAsset -loadOTL $results[0];
}


global proc
houdiniEngine_syncAssetOutput(int $syncOnlyVisible)
{
    string $currSels[] = `ls -sl`;
    if( size($currSels) < 1 )
    {
	error("Please select a houdiniAsset node to sync the output.");
    }
    string $currSel = $currSels[0];
    string $nodeTypeOfSel = `nodeType $currSel`;
    if( $nodeTypeOfSel == "houdiniAsset" )
    {
	string $children[] = `listRelatives -c -pa $currSel`;
	for( $ii = 0; $ii < size($children); $ii++ )
	{
	    delete $children[$ii];
	}
	string $cmd = "houdiniAsset";
	if( $syncOnlyVisible )
	    $cmd = $cmd + " -syncOnlyVisible";
			
	$cmd = $cmd + " -sync ";
	$cmd = $cmd + $currSel;
	evalEcho($cmd);
    }
    else
    {
	error("Please select a houdiniAsset node to sync the output.");
    }
}

global proc
houdiniEngine_reloadAsset(string $asset)
{
    string $assetPathPlug = $asset + ".assetPath";
    string $assetPath = `getAttr $assetPathPlug`;

    string $srcPlugs[] = `listConnections -s 1 -d 0 -p 1 $asset`;
    string $dstPlugs[] = `listConnections -s 0 -d 1 -p 1 $asset`;

    string $inputPlugs[];
    for( $ii=0; $ii < size($srcPlugs); $ii++ )
    {
	string $srcPlug = $srcPlugs[$ii];
	string $inputPlug[] = `listConnections -s 0 -d 1 -p 1 $srcPlug`;
	$inputPlugs[ size($inputPlugs) ] = $inputPlug[0];
	
    }

    string $outputPlugs[];
    for( $ii=0; $ii < size($dstPlugs); $ii++ )
    {
	string $dstPlug = $dstPlugs[$ii];
	string $outputPlug[] = `listConnections -s 1 -d 0 -p 1 $dstPlug`;
	$outputPlugs[ size($outputPlugs) ] = $outputPlug[0];		
    }


    //disconnect all inputs and outputs first.

    for( $ii=0; $ii < size($srcPlugs); $ii++ )
    {
	string $srcPlug = $srcPlugs[$ii];
	string $inputPlug = $inputPlugs[$ii];
	disconnectAttr $srcPlug $inputPlug;	
    }

    for( $ii=0; $ii < size($dstPlugs); $ii++ )
    {
	string $dstPlug = $dstPlugs[$ii];
	string $outputPlug = $outputPlugs[$ii];
	disconnectAttr $outputPlug $dstPlug;	
    }    

    //delete our asset, flush the undo since this operation is not undoable.
    //and it also force the deleted node to fall off the undo queue so it gets
    // actually destructed and thus remove the corresponding asset on the houdini side
    delete $asset;		
    flushUndo;

    //reload the asset and restore connections:

    houdiniAsset -loadOTL $assetPath;
    

    refreshEditorTemplates;
    
    for( $ii=0; $ii < size($srcPlugs); $ii++ )
    {
	string $srcPlug = $srcPlugs[$ii];
	string $inputPlug = $inputPlugs[$ii];

	string $array[] = stringToStringArray($srcPlug, ".");
	string $srcNode = $array[0];
	if(`objExists $srcNode`)
	{
	    connectAttr $srcPlug $inputPlug;	
	}
    }

    for( $ii=0; $ii < size($dstPlugs); $ii++ )
    {
	string $dstPlug = $dstPlugs[$ii];
	string $outputPlug = $outputPlugs[$ii];

	string $array[] = stringToStringArray($dstPlug, ".");
	string $dstNode = $array[0];
	if(`objExists $dstNode`)
	{
	    connectAttr $outputPlug $dstPlug;	
	}
    }
    
    select -r $asset;  
    
}

global proc
houdiniEngine_reloadAssetOutputMenuClick()
{
    string $currSels[] = `ls -sl`;
    if( size($currSels) < 1 )
    {
	error("Please select a houdiniAsset node to reload.");
    }
    string $currSel = $currSels[0];
    string $nodeTypeOfSel = `nodeType $currSel`;
    if( $nodeTypeOfSel == "houdiniAsset" )
    {
		
	//FIXME: TODO: This is not yet working reliably. use
	//a workaround for now to reload the asset.
	//houdiniAsset -reloadAsset $currSel;
	//refreshEditorTemplates;

	houdiniEngine_reloadAsset( $currSel );
    }
    else
    {
	error("Please select a houdiniAsset node to reload.");
    }

}

global proc
houdiniEngine_createInstance( string $assetNode, 
			      string $objToInstancePath,
			      string $parent, 
			      int $instancerIndex, 
			      int $instanceIndex )
{
    
    string $array[] = stringToStringArray($objToInstancePath, "|");
    string $objToInstanceName = $array[ size($array) - 1 ];
    string $newInstanceName = $objToInstanceName + "_instance" + $instanceIndex;
    string $newInstance[] = `instance -name $newInstanceName $objToInstancePath`;

    if( $parent != "" )
    {
	parent $newInstance[0] $parent;
    }
    
    showHidden $newInstance[0];

    string $outputTransformPlug = $assetNode + ".outputInstancers[" + $instancerIndex + "]" + ".outputInstanceTransform[" + $instanceIndex + "]";    
    string $outputTranslatePlug = $outputTransformPlug + ".outputInstanceTranslate";
    string $newInstanceTranslatePlug = $newInstance[0] + ".t";
    connectAttr $outputTranslatePlug $newInstanceTranslatePlug;

    string $outputRotatePlug = $outputTransformPlug + ".outputInstanceRotate";
    string $newInstanceRotatePlug = $newInstance[0] + ".r";
    connectAttr $outputRotatePlug $newInstanceRotatePlug;

    string $outputScalePlug = $outputTransformPlug + ".outputInstanceScale";
    string $newInstanceScalePlug = $newInstance[0] + ".s";
    connectAttr $outputScalePlug $newInstanceScalePlug;
    

}

global proc
houdiniEngineCreateUI()
{
    //cleanup UI
    houdiniEngineDeleteUI;

    global string $gMainWindow;
    setParent $gMainWindow;

    menu -label "Houdini Engine"
	-tearOff true
	houdiniEngineMenu;
    menuItem -label "Load Houdini Asset..."
	-command "houdiniEngine_loadOTLMenuClick";
    menuItem -label "Sync Asset Output"
	-command "performAssetSync 0";
    menuItem -optionBox true
	-command "performAssetSync 1";
    menuItem -label "Reload Asset"
	-command "houdiniEngine_reloadAssetOutputMenuClick";
    menuItem -label "HAPI Debug Window"
	-command "houdiniEngine_debugWindowMenuClick";
}
