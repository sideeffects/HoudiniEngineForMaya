
//  Description:
//		This script provides an option box dialog for the sync asset menu
//


//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//  Return Value:
//      None.
//
proc setOptionVars(int $forceFactorySettings)
{
    //	Mode.
    //
    if ($forceFactorySettings || !`optionVar -exists assetSyncMode`) {
	optionVar -intValue assetSyncMode 1;
    }

    if ($forceFactorySettings || !`optionVar -exists assetSyncTemplated`) {
	optionVar -intValue assetSyncTemplated 1;
    }
	
}

//
//  Procedure Name:
//      AssetSyncSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
global proc AssetSyncSetup(string $parent, int $forceFactorySettings)
{
	
    setOptionVars($forceFactorySettings);

    setParent $parent;	

    //	Mode.
    //
    radioButtonGrp -edit 
	    -select `optionVar -query assetSyncMode`
	    AssetSyncMode;

    radioButtonGrp -edit 
	    -select `optionVar -query assetSyncTemplated`
	    AssetSyncTemplated;

}

//
//  Procedure Name:
//      AssetSyncCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
global proc AssetSyncCallback(string $parent, int $doIt)
{
    setParent $parent;
	
    optionVar -intValue assetSyncMode
	    `radioButtonGrp -query -select AssetSyncMode`;	

    optionVar -intValue assetSyncTemplated
	    `radioButtonGrp -query -select AssetSyncTemplated`;	

    if ($doIt) {
	performAssetSync 0; 
	addToRecentCommandQueue "performAssetSync 0" "AssetSync";
    }
}

//
//  Procedure Name:
//      AssetSyncOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
proc AssetSyncOptions()
{
    //	Name of the command for this option box.
    //
    string $commandName = "AssetSync";

    //	Build the option box actions.
    //
    string $callback = ($commandName + "Callback");
    string $setup = ($commandName + "Setup");

    //	Get the option box.
    //
    string $layout = getOptionBox();
    setParent $layout;
	
    //	Pass the command name to the option box.
    //
    //setOptionBoxCommandName($commandName);
	
    //	Activate the default UI template.
    //
    setUITemplate -pushTemplate DefaultTemplate;

    //	Turn on the wait cursor.
    //
    waitCursor -state 1;

    tabLayout -scr true -tv false;
    string $parent = `columnLayout -adjustableColumn true`;
	
    radioButtonGrp -label "Sync Mode"
	    -numberOfRadioButtons 2
	    -label1 "All"
	    -label2 "Only Visible" 				
	    -select 1
	    AssetSyncMode;
	
    radioButtonGrp -label "Sync Templated Geometry"
	    -numberOfRadioButtons 2
	    -label1 "No"
	    -label2 "Yes" 				
	    -select 1
	    AssetSyncTemplated;
			
    //	Turn off the wait cursor.
    //
    waitCursor -state 0;
	
    //	Deactivate the default UI template.
    //
    setUITemplate -popTemplate;

    //	'Apply' button.
    //
    string $applyBtn = getOptionBoxApplyBtn();
    button -edit
	    -label "Sync"
	    -command ($callback + " " + $parent + " " + 1)
	    $applyBtn;

    //	'Save' button.
    //
    string $saveBtn = getOptionBoxSaveBtn();
    button -edit 
	    -command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
	    $saveBtn;

    //	'Reset' button.
    //
    string $resetBtn = getOptionBoxResetBtn();
    button -edit 
	    -command ($setup + " " + $parent + " " + 1)
	    $resetBtn;

    //	Set the option box title.
    //
    setOptionBoxTitle ("Asset Sync Options");
	

    //	Set the current values of the option box.
    //
    eval (($setup + " " + $parent + " " + 0));	
	
    //	Show the option box.
    //
    showOptionBox();
}


//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
proc string assembleCmd()
{
//  FIXME: This isn't strictly kosher.  The code here should not be
//  calling another script, but more like the commented code here,
//  where it just calls a command.
/*
    string $cmd = "houdiniAsset";

    setOptionVars(false);

	
    int $assetSyncMode = `optionVar -query assetSyncMode`;
	
    if( $assetSyncMode == 2 )
    {	
	$cmd = ($cmd + " -syncHidden");
    }
	
    $cmd = $cmd + " -sync ";
	
    string $sel[] = `ls -sl`;

    $cmd = $cmd + $sel[0];
*/

    string $cmd = "houdiniEngine_syncAssetOutput(";

    int $assetSyncMode = `optionVar -query assetSyncMode`;

    int $syncHidden = 0;	
    if( $assetSyncMode == 2 )
    {	
	$syncHidden = 1;
    }    

    $cmd = $cmd + $syncHidden;

    $cmd += ",";

    int $assetSyncTemplated = `optionVar -query assetSyncTemplated`;

    int $syncTemplated = 0;	
    if( $assetSyncTemplated == 2 )
    {	
	$syncTemplated = 1;
    }

    $cmd = $cmd + $syncTemplated;

    $cmd = $cmd + ");";
	
    return $cmd;
}

//
//  Procedure Name:
//      performAssetSync
//
//  Description:
//		Syncs the output of an asset with the data that is available
//		on the asset node.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performAssetSync(int $action)
{
    string $cmd = "";

    switch ($action) {

	//Execute the command.
	//
	case 0:
	    //	Retrieve the option settings
	    //
	    setOptionVars(false);

	    //	Get the command.
	    //
	    $cmd = `assembleCmd`;
	    
	    //	Execute the command with the option settings.
	    //
	    evalEcho($cmd);

	    break;

	//Show the option box.
	//
	case 1:
	    AssetSyncOptions;
	    break;

	//Return the command string.
	//
	case 2:
	    //	Retrieve the option settings.
	    //
	    setOptionVars (false);

	    //	Get the command.
	    //
	    $cmd = `assembleCmd`;
	    break;
    }
    return $cmd;
}

