proc string[] getUpstreamNodes(string $node, string $type)
{
    string $upstreamNodes[] = `hyperShade -lun $node`;

    string $filteredNodes[];

    for ($upstreamNode in $upstreamNodes)
    {
        if (`nodeType $upstreamNode` == $type)
            $filteredNodes[size($filteredNodes)] = $upstreamNode;
    }

    return $filteredNodes;
}

global proc
houdiniEngine_preserveHoudiniScaleChanged(string $assetNode)
{
    string $upstreamInputGeos[]   = getUpstreamNodes($assetNode, "houdiniInputGeometry");
    string $upstreamAssets[]      = getUpstreamNodes($assetNode, "houdiniAsset");
    string $upstreamInputXforms[] = getUpstreamNodes($assetNode, "houdiniInputTransform");
    string $upstreamInputCurves[] = getUpstreamNodes($assetNode, "houdiniInputCurve");

    int $preserveScale = `getAttr ($assetNode + ".preserveScale")`;

    for ($upstreamInputGeo in $upstreamInputGeos)
        setAttr ($upstreamInputGeo + ".preserveScale") $preserveScale;

    for ($upstreamAsset in $upstreamAssets)
        setAttr ($upstreamAsset + ".preserveScale") $preserveScale;

    for ($upstreamInputXform in $upstreamInputXforms)
        setAttr ($upstreamInputXform + ".preserveScale") $preserveScale;

    for ($upstreamInputCurve in $upstreamInputCurves)
        setAttr ($upstreamInputCurve + ".preserveScale") $preserveScale;
}

global proc
houdiniEngine_alwaysMergeInputGeometryChanged(string $assetNode)
{
    // Handle inputs connected to asset parms
    if (`attributeExists "houdiniAssetParm" $assetNode`)
    {
        string $parmAttrNames[] = `listAttr -st "*__node" ($assetNode + ".houdiniAssetParm")`;

        for ($parmAttrName in $parmAttrNames)
        {
            string $attr = $assetNode + ".houdiniAssetParm." + $parmAttrName;
            houdiniEngine_setAssetInput($attr, houdiniEngine_getAssetInput($attr));
        }

        int $inputMultiIndices[] = `getAttr -multiIndices ($assetNode + ".input")`;

        for ($inputMultiIndex in $inputMultiIndices)
        {
            string $attr = $assetNode + ".input[" + $inputMultiIndex + "].inputNodeId";
            houdiniEngine_setAssetInput($attr, houdiniEngine_getAssetInput($attr));
        }
    }

    // Handle inputs that are connected to asset inputs
    int $nInputs = `getAttr -s ($assetNode + ".input")`;

    for ($i = 0; $i < $nInputs; $i++)
    {
        houdiniEngine_setAssetInput($assetNode + ".input[" + $i + "].inputNodeId",
            houdiniEngine_getAssetInput($assetNode + ".input[" + $i + "].inputNodeId"));
    }

    // Make sure that the packing setting has been applied properly
    houdiniEngine_packBeforeMergeChanged($assetNode);
}

global proc
houdiniEngine_packBeforeMergeChanged(string $assetNode)
{
    string $upstreamInputMerges[] = getUpstreamNodes($assetNode, "houdiniInputMerge");

    int $packBeforeMerge = `getAttr ($assetNode + ".packBeforeMerge")`;

    for ($upstreamInputMerge in $upstreamInputMerges)
        setAttr ($upstreamInputMerge + ".packBeforeMerge") $packBeforeMerge;
}
