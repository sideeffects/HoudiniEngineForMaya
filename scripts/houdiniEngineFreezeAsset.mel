global proc int
houdiniEngine_freezeAsset(string $assetNode)
{
    if( `getAttr ( $assetNode + ".frozen")` ) {
        print "Error: Asset is already frozen\n";
        return 0;
    }
    // add string attributes for caching attribute names for output connections
    // add message attributes for proxy connections to keep track of output nodes
    if(`attributeExists "cachedSrcAttr" $assetNode`)
        deleteAttr ( $assetNode + ".cachedSrcAttr");
    select $assetNode;
    addAttr -longName "cachedSrcAttr" -dt "string" -multi;

    if(`attributeExists "cachedDstAttr" $assetNode`)
        deleteAttr ( $assetNode + ".cachedDstAttr");
    select $assetNode;
    addAttr -longName "cachedDstAttr" -dt "string" -multi;

    if(`attributeExists "cachedDstNode" $assetNode`)
        deleteAttr ( $assetNode + ".cachedDstNode");
    select $assetNode;
    addAttr -longName "cachedDstNode" -at "message" -multi;

    setAttr  ( $assetNode + ".frozen" ) 1;
    // disconnect output objects

    string $outputObjCon[] = `listConnections -p on ($assetNode + ".outputObjects")`;
    int $attrIndex = 0;
    for($con in $outputObjCon) {
        string $src = `connectionInfo -sfd $con`;
        string $discon = $con;

        // if a mesh output has auxiliary nodes or downstream history
        // need a temporary mesh shape to backstop the history
        if(endsWith($src, "outputPartMeshData")) {
            if(nodeType(plugNode($con)) != "mesh") {
                string $proxyMesh = `createNode mesh -n "houdiniAssetProxyMesh#" -parent $assetNode`;
                connectAttr $src ($proxyMesh + ".inMesh");

                // force a compute of the mesh before disconnecting so that it has data
                polyEvaluate $proxyMesh;
                $discon = $proxyMesh + ".inMesh";
                connectAttr -f  ($proxyMesh + ".outMesh") $con;
                setAttr ($proxyMesh + ".intermediateObject") 1;
            }
        }
        string $srcAttr = plugAttr($src);
        string $dstAttr = plugAttr($con);
        setAttr ( $assetNode + ".cachedSrcAttr[" + $attrIndex +"]") -type "string" $srcAttr;
        setAttr ( $assetNode + ".cachedDstAttr[" + $attrIndex +"]") -type "string" $dstAttr;
        string $dstNode = plugNode($con);
        select $dstNode;
        if(!`attributeExists "houdiniAssetOutput" $dstNode`) {
            addAttr -longName "houdiniAssetOutput" -at "message" -multi;
        }
        int $dstIndex = `getAttr -size ($dstNode + ".houdiniAssetOutput")`;
        connectAttr ( $assetNode + ".cachedDstNode[" + $attrIndex +"]") ($dstNode + ".houdiniAssetOutput[" + $dstIndex +"]" );
        disconnectAttr $src $discon;
        $attrIndex++;
    }

    // disconnect output materials
    string $outputMatCon[] = `listConnections -p on ($assetNode + ".outputMaterials")`;

    for($con in $outputMatCon) {
        string $src = `connectionInfo -sfd $con`;
        disconnectAttr $src $con;

        string $srcAttr = plugAttr($src);
        string $dstAttr = plugAttr($con);
        setAttr ( $assetNode + ".cachedSrcAttr[" + $attrIndex +"]") -type "string" $srcAttr;
        setAttr ( $assetNode + ".cachedDstAttr[" + $attrIndex +"]") -type "string" $dstAttr;
        string $dstNode = plugNode($con);
        select $dstNode;
        if(!`attributeExists "houdiniAssetOutput" $dstNode`) {
            addAttr -longName "houdiniAssetOutput" -at "message" -multi;
        }
        int $dstIndex = `getAttr -size ($dstNode + ".houdiniAssetOutput")`;
        connectAttr ( $assetNode + ".cachedDstNode[" + $attrIndex +"]") ($dstNode + ".houdiniAssetOutput[" + $dstIndex +"]" );

        $attrIndex++;
    }

    // disconnect output instancers
    string $outputInstCon[] = `listConnections -p on ($assetNode + ".outputInstancers")`;

    for($con in $outputInstCon) {
        string $src = `connectionInfo -sfd $con`;
        disconnectAttr $src $con;

        string $srcAttr = plugAttr($src);
        string $dstAttr = plugAttr($con);
        setAttr ( $assetNode + ".cachedSrcAttr[" + $attrIndex +"]") -type "string" $srcAttr;
        setAttr ( $assetNode + ".cachedDstAttr[" + $attrIndex +"]") -type "string" $dstAttr;
        string $dstNode = plugNode($con);
        select $dstNode;
        if(!`attributeExists "houdiniAssetOutput" $dstNode`) {
            addAttr -longName "houdiniAssetOutput" -at "message" -multi;
        }
        int $dstIndex = `getAttr -size ($dstNode + ".houdiniAssetOutput")`;
        connectAttr ( $assetNode + ".cachedDstNode[" + $attrIndex +"]") ($dstNode + ".houdiniAssetOutput[" + $dstIndex +"]" );

        $attrIndex++;
    }

    // don't disconnect output transforms, since they connect back to the asset
    // connection is determinded by the asset options
    // and not a particular output

    // freeze input merge nodes
    string $inputMergeCon[] = `listConnections -type "houdiniInputMerge" $assetNode`;
    for($merge in  $inputMergeCon) {
        setAttr  ( $merge + ".frozen" ) 1;
    }

    setAttr -l true ($assetNode + ".houdiniAssetParm");

    return 1;
}

global proc int
houdiniEngine_unfreezeAsset(string $assetNode)
{
    if( !`getAttr ( $assetNode + ".frozen")` ) {
        print "Error: Asset is not frozen\n";
        return 0;
    }

    setAttr -l false ($assetNode + ".houdiniAssetParm");
    // can't restore the connections if one of the cached connection atts isn't there
    // not sure if we should remove the
    if(   !`attributeExists "cachedSrcAttr" $assetNode`
       || !`attributeExists "cachedDstAttr" $assetNode`
       || !`attributeExists "cachedDstNode" $assetNode` ) {
        print "Error: Some of the cached connection data is missing, cannot unfreeze asset\n";
        return 0;
    }

    // unfreeze asset
    setAttr  ( $assetNode + ".frozen" ) 0;
    // unfreeze input merge nodes
    string $inputMergeCon[] = `listConnections -type "houdiniInputMerge" $assetNode`;
    for($merge in  $inputMergeCon) {
        setAttr  ( $merge + ".frozen" ) 0;
    }
    houdiniAsset -reloadNoSync $assetNode;

    // set the asset node to blocking - we don't want it to cook on each connectAttr
    setAttr  ( $assetNode + ".nodeState") 2;
    // disconnect output objects

    string $dstNodes[];
    int $ai = 0;

    int $numCon = `getAttr -size  ($assetNode + ".cachedSrcAttr")`;

    for($ai = 0; $ai  < $numCon; $ai++) {
        string $srcAttr = `getAttr ( $assetNode + ".cachedSrcAttr[" + $ai +"]")`;
        string $dstAttr = `getAttr ( $assetNode + ".cachedDstAttr[" + $ai +"]")`;

        string $dstNodesOut[] = listConnections  ( $assetNode + ".cachedDstNode[" + $ai +"]");
        if(size($dstNodesOut) > 0) {
            string $dstNode = $dstNodesOut[0];
            $dstNodes[size($dstNodes)] = $dstNode;

            // if an output that needs reconnecting has an input mesh it had better be the
            // the mesh we added to backstop downstream history when we did the freeze
            string $inputProxies[] = `listConnections -type "mesh" -d off -shapes on $dstNode`;

            // need the -f flag in case there is a proxy upstream mesh connected.
            connectAttr -f ($assetNode + "." + $srcAttr) ($dstNode + "." + $dstAttr);

            // delete the proxies only after they're been forced to disconnect, otherwise
            // maya's delete might take some of the downstream history with it
            for($proxy in  $inputProxies) {
                delete $proxy;
            }
        }
    }

    // once we're restored all the connections, delete the placeholder
    // message attributes from the output nodes
    string $uniqueDstNodes[] = stringArrayRemoveDuplicates($dstNodes);
    for($dstNode in $uniqueDstNodes) {
        deleteAttr( $dstNode + ".houdiniAssetOutput");
    }

    // set the asset node's state back to normal so that it can cook again.
    setAttr  ( $assetNode + ".nodeState") 0;

    deleteAttr ( $assetNode + ".cachedSrcAttr");
    deleteAttr ( $assetNode + ".cachedDstAttr");
    deleteAttr ( $assetNode + ".cachedDstNode");

    return 1;
}


