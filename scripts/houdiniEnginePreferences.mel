source "houdiniEngineUtils.mel";

global proc
houdiniEnginePreferences_refresh()
{
    setParent houdiniEnginePreferences;

    textFieldGrp -e
        -text `optionVar -query "houdiniEngineHfsLocation"`
        hfsLocationField;

    textFieldGrp -e
        -text `optionVar -query "houdiniEngineHapilLocation"`
        hapilLocationField;

    checkBoxGrp -e
        -value1 `optionVar -query "houdiniEngineAsynchronousMode"`
        asynchronousModeCheck;

    checkBoxGrp -e
        -value1 `optionVar -query "houdiniEngineDeleteAfterBake"`
        delAfterBakeCheck;

    optionMenuGrp -e
        -value `optionVar -query "houdiniEngineViewProduct"`
        viewProductOpt;

    checkBoxGrp -e
        -value1 `optionVar -query "houdiniEngineUnsetLLP"`
        unsetLLPCheck;

    checkBoxGrp -e
        -value1 `optionVar -query "houdiniEngineUnsetPP"`
        unsetPPCheck;

    int $sessionType = int(`optionVar -query "houdiniEngineSessionType"`);

    // if the optionvars still refer to an in-process session,
    // (because the prefs window haven't been edited since houdini was updated
    // we set the prefs UI the new defaults (auto-start named pipe). so that if the
    // prefs are saved they will be consisten
    // with the way we overrode the in-process settings internally

    int $originalSessionType = $sessionType;
    if($sessionType == 0) {
        $sessionType = 2;
    }

    switch ( $sessionType )
    {
    case 0:
        radioCollection -edit -select sessionTypePipe
            sessionTypeList;
        break;

    case 1:
        radioCollection -edit -select sessionTypeSocket
            sessionTypeList;
        break;

    case 2:
        radioCollection -edit -select sessionTypePipe
            sessionTypeList;
        break;
    }

    if (`optionVar -exists "houdiniEngineHfsLocation"`)
    {
        textFieldGrp -edit
            -text `optionVar -query "houdiniEngineHfsLocation"` hfsLocationField;
    }
    else
    {
        string $hfsPath = houdiniEngine_getHfsPath(true);

        if (size($hfsPath) > 0)
            textFieldGrp -edit -text $hfsPath hfsLocationField;
        else
            houdiniEnginePreferences_showHfsErrorDialog();
    }

    if (`optionVar -exists "houdiniEngineHapilLocation"` && size(`optionVar -query "houdiniEngineHapilLocation"`) > 0)
    {
        textFieldGrp -edit
            -text `optionVar -query "houdiniEngineHapilLocation"` hapilLocationField;
    }
    else
    {
        string $hfsPath   = `textFieldGrp -q -text hfsLocationField`;
        string $hapilPath = houdiniEngine_getHapilPath(false, $hfsPath);

        if (size($hapilPath) > 0)
            textFieldGrp -edit -text $hapilPath hapilLocationField;
        else
            houdiniEnginePreferences_showHapilErrorDialog();
    }

    if (`optionVar -exists "houdiniEngineThriftServer"`)
    {
        textField -edit
            -text `optionVar -query "houdiniEngineThriftServer"`
            sessionSocketHost;
    }
    else
        textField -edit -text "localhost" sessionSocketHost;

    if (`optionVar -exists "houdiniEngineThriftPort"`)
    {
        textField -edit
            -text `optionVar -query "houdiniEngineThriftPort"`
            sessionSocketPort;
    }
    else
        textField -edit -text "9090" sessionSocketPort;

    if((`optionVar -query "houdiniEngineSessionPipeCustom"` == 0) || $originalSessionType == 0)
        radioButton -edit
            -select
            sessionPipeAuto;
    else
        radioButton -edit
            -select
            sessionPipeCustom;

    textField -edit
        -text `optionVar -query "houdiniEngineThriftPipe"`
        sessionPipeName;

    houdiniEnginePreferences_toggleSessionTypeSocket($sessionType == 1);
    houdiniEnginePreferences_toggleSessionTypePipe($sessionType == 2);

    if (`optionVar -exists "houdiniEngineTimeout"`)
    {
        intFieldGrp -edit
            -value1 `optionVar -query "houdiniEngineTimeout"`
            timeoutGrp;
    }
    else
        intFieldGrp -edit -value1 10000 timeoutGrp;
}

global proc
houdiniEnginePreferences_save()
{
    setParent houdiniEnginePreferences;

    string $hfsLocation   = `textFieldGrp -q -text hfsLocationField`;
    string $hapilLocation = `textFieldGrp -q -text hapilLocationField`;

    optionVar
        -stringValue "houdiniEngineHfsLocation"
        $hfsLocation;
    optionVar
        -stringValue "houdiniEngineHapilLocation"
        $hapilLocation;

    optionVar
        -intValue "houdiniEngineAsynchronousMode"
        `checkBoxGrp -q -value1 asynchronousModeCheck`;
    optionVar
        -intValue "houdiniEngineDeleteAfterBake"
        `checkBoxGrp -q -value1 delAfterBakeCheck`;
    optionVar
        -stringValue "houdiniEngineViewProduct"
        `optionMenuGrp -q -value viewProductOpt`;
    optionVar
        -intValue "houdiniEngineUnsetLLP"
        `checkBoxGrp -q -value1 unsetLLPCheck`;
    optionVar
        -intValue "houdiniEngineUnsetPP"
        `checkBoxGrp -q -value1 unsetPPCheck`;

    if (`radioButton -query -select sessionTypeSocket`)
    {
        optionVar -intValue "houdiniEngineSessionType" 1;
    }
    else if (`radioButton -query -select sessionTypePipe`)
    {
        optionVar -intValue "houdiniEngineSessionType" 2;
    }

    optionVar
        -stringValue "houdiniEngineThriftServer"
        `textField -query -text sessionSocketHost`;

    int $portVal = `textField -query -text sessionSocketPort`;
    optionVar
        -intValue "houdiniEngineThriftPort"
        $portVal;

    optionVar
        -intValue "houdiniEngineSessionPipeCustom"
        `radioButton -query -select sessionPipeCustom`;

    optionVar
        -stringValue "houdiniEngineThriftPipe"
        `textField -query -text sessionPipeName`;

    optionVar
        -intValue "houdiniEngineTimeout"
        `intFieldGrp -query -value1 timeoutGrp`;

    // reload the plugin for changes to take affect
    if (`pluginInfo -q -loaded houdiniEngine`)
    {
        int $engineInUse = !`pluginInfo -q -unloadOk houdiniEngine`;
        
        if ($engineInUse)
        {   
            confirmDialog -title "Houdini Engine Preferences"
                -button "OK"
                -icon "information"
                -message "Please restart Maya for the changes to take affect.";
        }
        else
        {
            print("Attempting to reload Houdini Engine for Maya with new settings...\n");
            unloadPlugin("houdiniEngine");
            loadPlugin("houdiniEngine");
        }
    }

    houdiniEnginePreferences_close;
}

global proc
houdiniEnginePreferences_close()
{
    evalDeferred "deleteUI -window houdiniEnginePreferences";
}

proc string
getDefaultHfsPaths()
{
    return "    Windows: C:\\Program Files\\Side Effects Software\\Houdini x.x.x\n" +
           "    Linux: /opt/hfsx.x.x\n" +
           "    macOS: /Applications/Houdini/Houdinix.x.x/Frameworks/Houdini.framework/Resources";
}

proc string
getDefaultHapilPaths()
{
    return "    Windows: C:\\Program Files\\Side Effects Software\\Houdini x.x.x\\bin\\libHAPIL.dll\n" +
           "    Linux: /opt/hfsx.x.x/dsolib/libHAPIL.so\n" +
           "    macOS: /Applications/Houdini/Houdinix.x.x/Frameworks/Houdini.framework/Libraries/libHAPIL.dylib";
}

global proc
houdiniEnginePreferences_showHfsErrorDialog()
{
    confirmDialog -title "Houdini Engine Preferences"
        -button "OK"
        -message ("The HFS path could not be found in the specified directory.\n\n" +
                  "The default locations are:\n" + getDefaultHfsPaths());
}

global proc
houdiniEnginePreferences_showHapilErrorDialog()
{
    confirmDialog -title "Houdini Engine Preferences"
        -button "OK"
        -message ("The path to libHAPIL could not be found from the specified HFS directory.\n" +
                  "You will need to specify the path manually.\n\n" +
                  "The default locations are:\n" + getDefaultHapilPaths());
}

global proc
houdiniEnginePreferences_showHfsLocationHelpDialog()
{
    confirmDialog -title "Houdini Engine Preferences"
        -button "OK"
        -message ("\"HFS location\" is used to specify where Houdini has been installed. If Houdini is installed in\n" +
                  "its default location, this should be automatically detected.\n\n" +
                  "If Houdini has been installed in a non-default location, this field should be set to the folder\n" +
                  "that includes the houdini_setup file.\n\n" +
                  "The default locations are:\n" + getDefaultHfsPaths());
}

global proc
houdiniEnginePreferences_showHapilLocationHelpDialog()
{
    confirmDialog -title "Houdini Engine Preferences"
        -button "OK"
        -message ("\"libHAPIL location\" is used to specify where libHAPIL has been installed. If Houdini is installed\n" +
                  "in its default location, this should be automatically detected.\n\n" +
                  "If Houdini has been installed in a non-deafult location, this field should be set to the path to\n" +
                  "libHAPIL.[dll|so|dylib]\n\n" +
                  "The default locations are:\n" + getDefaultHapilPaths());
}

global proc
houdiniEnginePreferences_setHfsLocation(string $location)
{
    global string $houdiniEngineHfsLocation;

    $houdiniEngineHfsLocation = $location;
}

global proc
houdiniEnginePreferences_setHapilLocation(string $location)
{
    global string $houdiniEngineHapilLocation;

    $houdiniEngineHapilLocation = $location;
}

global proc
houdiniEnginePreferences_browseForHfs()
{
    string $existingLocation = `textFieldGrp -q -text hfsLocationField`;

    string $fileDialogResults[] = `fileDialog2
        -caption "Browse to HFS Location"
        -fileMode 3
        -okCaption "Select"
        -dir $existingLocation`;

    if (size($fileDialogResults) > 0)
    {
        string $hfs = $fileDialogResults[0];

        if ($hfs == "") // cancel
            return;

        if (size($hfs) > 0  && `filetest -r $hfs`)
        {
            string $hapilLocation = houdiniEngine_getHapilPath(false, $hfs);

            textFieldGrp -edit -text $hfs hfsLocationField;

            if (size($hapilLocation) > 0)
                textFieldGrp -edit -text $hapilLocation hapilLocationField;
            else
                houdiniEnginePreferences_showHapilErrorDialog();

            return;
        }

        houdiniEnginePreferences_showHfsErrorDialog();
    }

}

global proc
houdiniEnginePreferences_browseForHapil()
{
    string $existingLocation = `textFieldGrp -q -text hapilLocationField`;
    string $ext = houdiniEngine_getHapilExtension();

    if (size($existingLocation) <= 0)
        $existingLocation = `textFieldGrp -q -text hfsLocationField`;

    string $fileDialogResults[] = `fileDialog2
        -caption ("Browse to libHAPIL." + $ext)
        -fileMode 1
        -fileFilter ("*." + $ext)
        -okCaption "Select"
        -dir $existingLocation`;

    if (size($fileDialogResults) > 0)
    {
        string $hapil = $fileDialogResults[0];

        if (size($hapil) > 0  && `filetest -r $hapil`)
        {
            textFieldGrp -edit -text $hapil hapilLocationField;
            return;
        }

       houdiniEnginePreferences_showHapilErrorDialog();
    }
}

global proc
houdiniEnginePreferences_toggleAsynchronousMode(int $state)
{
    global int $houdiniEngineAsynchronousMode;

    $houdiniEngineAsynchronousMode = $state;
}

global proc
houdiniEnginePreferences_toggleUnsetLLP(int $state)
{
    global int $houdiniEngineUnsetLLP;

    $houdiniEngineUnsetLLP = $state;
}

global proc
houdiniEnginePreferences_toggleUnsetPP(int $state)
{
    global int $houdiniEngineUnsetPP;

    $houdiniEngineUnsetPP = $state;
}

global proc
houdiniEnginePreferences_toggleDelAfterBake(int $state)
{
    global int $houdiniEngineDeleteAfterBake;

    $houdiniEngineDeleteAfterBake = $state;
}

global proc
houdiniEnginePreferences_setViewProduct(string $state)
{
    global string $houdiniEngineViewProduct;

    $houdiniEngineViewProduct = $state;
}

global proc
houdiniEnginePreferences_toggleSessionTypeSocket(int $state)
{
    setParent houdiniEnginePreferences;

    houdiniEnginePreferences_toggleSessionTypeSocketCustom($state);
}

global proc
houdiniEnginePreferences_toggleSessionTypeSocketCustom(int $state)
{
    setParent houdiniEnginePreferences;

    textField -edit -enable $state sessionSocketHost;
    textField -edit -enable $state sessionSocketPort;
}

global proc
houdiniEnginePreferences_toggleSessionTypePipe(int $state)
{
    setParent houdiniEnginePreferences;

    radioButton -edit -enable $state sessionPipeAuto;
    radioButton -edit -enable $state sessionPipeCustom;

    int $custom = `radioButton -query -select sessionPipeCustom`;

    textField -edit -enable ($state && $custom) sessionPipeName;
    checkBoxGrp -edit -enable  ($state && !$custom) unsetLLPCheck;
    intFieldGrp -edit -enable  ($state && !$custom) timeoutGrp;
    text -edit -enable  ($state && !$custom) timeoutUnitLabel;
}

global proc
houdiniEnginePreferences_toggleSessionTypePipeCustom(int $state)
{
    setParent houdiniEnginePreferences;

    textField -edit -enable $state sessionPipeName;
    checkBoxGrp -edit -enable  (!$state) unsetLLPCheck;
    intFieldGrp -edit -enable (!$state) timeoutGrp;
    text -edit -enable (!$state) timeoutUnitLabel;
}

global proc
houdiniEnginePreferences()
{
    if(`window -exists houdiniEnginePreferences`)
    {
        showWindow houdiniEnginePreferences;
        return;
    }

    window
        -title "Houdini Engine Preferences"
        -menuBar true
        houdiniEnginePreferences;

    string $mainLayout = `formLayout`;

    // Versions
    string $houdiniVersion       = `houdiniEngine -houdiniVersion`;
    string $houdiniEngineVersion = `houdiniEngine -houdiniEngineVersion`;

    string $versionText = `text -align "left"
        -label ("Houdini Version: " + $houdiniVersion + "\n"
                + "Houdini Engine Version: " + $houdiniEngineVersion + "\n")`;

    // Global
    string $globalLayout = `frameLayout -label "Global"`;

    rowColumnLayout -numberOfColumns 3 -columnWidth 2 24 -columnWidth 3 24 -columnSpacing 3 5
        globalPreferences;

        textFieldGrp
            -label "HFS location:"
            -changeCommand "houdiniEnginePreferences_setHfsLocation \"#1\""
            hfsLocationField;

        button
            -label "..."
            -height 20
            -command "houdiniEnginePreferences_browseForHfs"
            hfsLocationBrowseBtn;

        button
            -label "?"
            -height 20
            -command "houdiniEnginePreferences_showHfsLocationHelpDialog"
            hfsLocationHelp;

        textFieldGrp
            -label "libHAPIL location:"
            -changeCommand "houdiniEnginePreferences_setHapilLocation \"#1\""
            hapilLocationField;

        button
            -label "..."
            -height 20
            -command "houdiniEnginePreferences_browseForHapil"
            hapilLocationBrowseBtn;

        button
            -label "?"
            -height 20
            -command "houdiniEnginePreferences_showHapilLocationHelpDialog"
            hapilLocationHelp;

        checkBoxGrp
            -numberOfCheckBoxes 1
            -label "Asynchronous Mode:"
            -label1 "(requires restart)"
            -changeCommand "houdiniEnginePreferences_toggleAsynchronousMode #1"
            asynchronousModeCheck;

        text -label "";

        button
            -label "?"
            -height 20
            -command ("confirmDialog -title \"Houdini Engine Preferences\" " +
                "-button \"OK\" -message \"\\\"Asynchronous Mode\\\" controls " +
                "whether Houdini Engine runs asynchronously. Running asynchronously " +
                "enables some nice features, such as progress bars and interrupts. " +
                "However, if an asset tries to interact with Maya, it may lead to " +
                "some unexpected behaviors. Disabling this option may fix these " +
                "issues. If unsure, leave it on. (Default: on)\"")
            asynchronousModeHelp;

        checkBoxGrp
            -numberOfCheckBoxes 1
            -label "Delete Asset After Baking:"
            -changeCommand "houdiniEnginePreferences_toggleDelAfterBake #1"
            delAfterBakeCheck;

        text -label "";
        text -label "";

        optionMenuGrp
            -label "View Assets in:"
            -changeCommand "houdiniEnginePreferences_setViewProduct \"#1\""
            viewProductOpt;

            menuItem -label "Houdini FX";
            menuItem -label "Houdini Core";

        text -label "";

        button
            -label "?"
            -height 20
            -command ("confirmDialog -title \"Houdini Engine Preferences\" " +
                "-button \"OK\" -message \"\\\"View Assets in\\\" specifies " +
                "which Houdini product should be used when assets are viewed via " +
                "Houdini Engine>Debugging>View Assets in Houdini. (Default: " +
                "Houdini Core)\"")
            viewAssetInProductHelp;

        setParent ..;
    setParent ..;

    // Sessions
    int $isLinux = `about -linux`;

    string $sessionLayout = `frameLayout -label "Back End (requires restart)"`;
        radioCollection sessionTypeList;

        formLayout sessionLayout;
            radioButton
                -collection sessionTypeList
                -label "TCP Socket"
                -changeCommand "houdiniEnginePreferences_toggleSessionTypeSocket #1"
                sessionTypeSocket;

            radioCollection sessionTypeSocketList;

            text -label "Host:" sessionSocketHostLabel;
            textField -width 200 sessionSocketHost;

            text -label "Port:" sessionSocketPortLabel;
            textField -width 50 sessionSocketPort;

            radioButton
                -collection sessionTypeList
                -label "Named Pipe"
                -changeCommand "houdiniEnginePreferences_toggleSessionTypePipe #1"
                sessionTypePipe;

            radioCollection sessionTypePipeList;

            radioButton
                -collection sessionTypePipeList
                -label "Auto-start server"
                -changeCommand "houdiniEnginePreferences_toggleSessionTypePipeCustom 0"
                sessionPipeAuto;

            radioButton
                -collection sessionTypePipeList
                -label "Manual server"
                -changeCommand "houdiniEnginePreferences_toggleSessionTypePipeCustom 1"
                sessionPipeCustom;

            intFieldGrp -label "Connection Timeout:" timeoutGrp;
            text -label "ms" timeoutUnitLabel;

            textField -width 200 sessionPipeName;
            checkBoxGrp
                -numberOfCheckBoxes 1
                -label "Unset LD_LIBRARY_PATH:"
                -label1 "(for Linux auto-start)"
                -changeCommand "houdiniEnginePreferences_toggleUnsetLLP #1"
                unsetLLPCheck;

            if (!$isLinux)
                checkBoxGrp -edit -visible 0  unsetLLPCheck;

            checkBoxGrp
                -numberOfCheckBoxes 1
                -label "Unset PYTHONPATH:"
                -label1 "(for auto-start)"
                -changeCommand "houdiniEnginePreferences_toggleUnsetPP #1"
                unsetPPCheck;

        setParent ..;

        formLayout -e
            -attachForm sessionTypeSocket "top" 5
            -attachForm sessionTypeSocket "left" 5

            -attachControl sessionSocketHostLabel "top" 5 sessionTypeSocket
            -attachControl sessionSocketHostLabel "left" 5 sessionTypeSocket

            -attachControl sessionSocketHost "top" 5 sessionTypeSocket
            -attachControl sessionSocketHost "left" 5 sessionSocketHostLabel

            -attachControl sessionSocketPortLabel "top" 5 sessionTypeSocket
            -attachControl sessionSocketPortLabel "left" 5 sessionSocketHost

            -attachControl sessionSocketPort "top" 5 sessionTypeSocket
            -attachControl sessionSocketPort "left" 5 sessionSocketPortLabel

            -attachControl sessionTypePipe "top" 5 sessionSocketPort
            -attachForm sessionTypePipe "left" 5

            -attachControl sessionPipeAuto "top" 5 sessionTypePipe
            -attachForm sessionPipeAuto "left" 20

            -attachControl timeoutGrp "top" 5 sessionPipeAuto
            -attachForm timeoutGrp "left" 20

            -attachControl timeoutUnitLabel "top" 9 sessionPipeAuto
            -attachControl timeoutUnitLabel "left" 0 timeoutGrp

            -attachControl unsetLLPCheck "top" 5 timeoutGrp
            -attachForm unsetLLPCheck "left" 20
            
            -attachControl unsetPPCheck "top" 5 unsetLLPCheck
            -attachForm unsetPPCheck "left" 20

            -attachControl sessionPipeCustom "top" 5 unsetPPCheck
            -attachForm sessionPipeCustom "left" 20

            -attachControl sessionPipeName "top" 5 unsetPPCheck
            -attachControl sessionPipeName "left" 5 sessionPipeCustom

            sessionLayout;

    setParent ..;

    // Buttons
    string $buttonLayout = `formLayout`;

        button
            -label "Save"
            -command "houdiniEnginePreferences_save"
            saveButton;

        button
            -label "Cancel"
            -command "houdiniEnginePreferences_close"
            cancelButton;

    setParent ..;
    setParent ..;

    formLayout -e
        -attachNone saveButton "top"
        -attachForm saveButton "left" 5
        -attachForm saveButton "bottom" 5
        -attachPosition saveButton "right" 1 50

        -attachNone cancelButton "top"
        -attachPosition cancelButton "left" 1 50
        -attachForm cancelButton "bottom" 5
        -attachForm cancelButton "right" 5

        $buttonLayout;

    setParent ..;

    formLayout -e
        -attachForm $versionText "top" 5
        -attachForm $versionText "left" 5
        -attachForm $versionText "right" 5

        -attachControl $globalLayout "top" 5 $versionText
        -attachForm $globalLayout "left" 5
        -attachForm $globalLayout "right" 5

        -attachControl $sessionLayout "top" 5 $globalLayout
        -attachForm $sessionLayout "left" 5
        -attachControl $sessionLayout "bottom" 5 $buttonLayout
        -attachForm $sessionLayout "right" 5

        -attachForm $buttonLayout "left" 5
        -attachForm $buttonLayout "bottom" 5
        -attachForm $buttonLayout "right" 5
        $mainLayout;

    houdiniEnginePreferences_refresh;

    showWindow;
}

